{"version":3,"sources":["components/Cards/Cards.module.scss","App.module.scss","components/Cards/Cards.tsx","api/colors.ts","components/Chart/Chart.tsx","App.tsx","api/index.ts","serviceWorker.ts","index.tsx","components/Chart/Chart.module.scss"],"names":["module","exports","Cards","props","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","data","confirmed","value","duration","separator","Date","lastUpdate","toDateString","recovered","deaths","COLORS","Chart","parseDateToXAxis","date","getDate","getMonth","count","lineChart","labels","dates","itDate","nowTime","getTime","push","getDates","datasets","finalObj","key","cases","currData","i","length","x","y","label","borderColor","pointBackgroundColor","fill","pointHitRadius","pointBorderWidth","slice","getInfo","options","legend","display","rtl","fontSize","usePointStyle","padding","position","elements","point","pointStyle","scales","xAxes","type","gridLines","drawTicks","ticks","autoSkip","yAxes","scaleLabel","labelString","title","fontFamily","text","fontColor","tooltips","mode","intersect","custom","tooltipModel","callbacks","tooltipItems","datasetIndex","index","titleAlign","bodyAlign","bodySpacing","xPadding","App","axios","get","then","res","globalData","dailyData","this","setState","space","img","state","Fragment","CircularProgress","spinnerAlign","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1b26cb23.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2gQkG\",\"card\":\"Cards_card__3oAUD\",\"infected\":\"Cards_infected__1UZb7\",\"recovered\":\"Cards_recovered__3y817\",\"deaths\":\"Cards_deaths__1bogj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3osZD\",\"spinnerAlign\":\"App_spinnerAlign__21T1Q\",\"space\":\"App_space__qgEAg\",\"img\":\"App_img__2OPCR\"};","import * as React from 'react';\r\nimport { Statistic } from '../../api';\r\nimport {Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\n\r\nimport styles from './Cards.module.scss';\r\n\r\ninterface ICardsProps {\r\n\tdata: Statistic\r\n}\r\n\r\nconst Cards: React.FunctionComponent<ICardsProps> = (props) => {\r\n\t\r\n\treturn (\r\n\t\t<div className={styles.container}>\r\n\t\t\t<Grid container spacing={3} justify=\"center\">\r\n\t\t\t\t<Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\" gutterBottom>\r\n\t\t\t\t\t\t\tInfected\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography variant=\"h5\">\r\n\t\t\t\t\t\t\t\t<CountUp\r\n\t\t\t\t\t\t\t\t\tstart={0}\r\n\t\t\t\t\t\t\t\t\tend={props.data.confirmed.value}\r\n\t\t\t\t\t\t\t\t\tduration={2}\r\n\t\t\t\t\t\t\t\t\tseparator=\",\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\">\r\n\t\t\t\t\t\t\t{new Date(props.data.lastUpdate).toDateString()}\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n\t\t\t\t\t</CardContent>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\" gutterBottom>\r\n\t\t\t\t\t\t\tRecovered\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography variant=\"h5\">\r\n\t\t\t\t\t\t\t<CountUp\r\n\t\t\t\t\t\t\t\t\tstart={0}\r\n\t\t\t\t\t\t\t\t\tend={props.data.recovered.value}\r\n\t\t\t\t\t\t\t\t\tduration={1.5}\r\n\t\t\t\t\t\t\t\t\tseparator=\",\"\r\n\t\t\t\t\t\t\t\t/>\t\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\">\r\n\t\t\t\t\t\t\t{new Date(props.data.lastUpdate).toDateString()}\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\r\n\t\t\t\t\t</CardContent>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\" gutterBottom>\r\n\t\t\t\t\t\t\tDeath\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography variant=\"h5\">\r\n\t\t\t\t\t\t\t<CountUp\r\n\t\t\t\t\t\t\t\tstart={0}\r\n\t\t\t\t\t\t\t\tend={props.data.deaths.value}\r\n\t\t\t\t\t\t\t\tduration={1}\r\n\t\t\t\t\t\t\t\tseparator=\",\"\r\n\t\t\t\t\t\t\t/>\t\t\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\">\r\n\t\t\t\t\t\t\t{new Date(props.data.lastUpdate).toDateString()}\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\r\n\t\t\t\t\t</CardContent>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Cards;\r\n","export const getRandomColor = () => {\r\n\tconst letters = '0123456789ABCDEF';\r\n\tlet color = '#';\r\n\r\n\tfor (let i = 0; i < 6; i++) {\r\n\t\tcolor += letters[Math.floor(Math.random() * 16)];\r\n\t}\r\n\r\n\treturn color;\r\n}\r\n\r\nexport const COLORS = [\r\n\t\"#DC143C\",\r\n\t\"#8A2BE2\",\r\n\t\"#FF7F50\",\r\n\t\"#7FFFD4\",\r\n\t\"#8A2BE2\",\r\n\t\"#A52A2A\",\r\n\t\"#FF7F50\",\r\n\t\"#6495ED\",\r\n\t\"#00FFFF\",\r\n\t\"#00008B\",\r\n\t\"#FF8C00\",\r\n\t\"#ADFF2F\",\r\n\t\"#CD5C5C\",\r\n\t\"#F0E68C\",\r\n\t\"#E6E6FA\",\r\n\t\"#FFFACD\",\r\n\t\"#E0FFFF\",\r\n\t\"#90EE90\",\r\n\t\"#FFB6C1\",\r\n\t\"#FFA07A\",\r\n\t\"#FFFFE0\",\r\n\t\"#FAF0E6\",\r\n\t\"#3CB371\",\r\n\t\"#FFA500\",\r\n\t\"#EEE8AA\",\r\n\t\"#98FB98\",\r\n\t\"#AFEEEE\",\r\n\t\"#DB7093\",\r\n\t\"#FFEFD5\",\r\n\t\"#FFDAB9\",\r\n\t\"#FFC0CB\",\r\n\t\"#DDA0DD\",\r\n\t\"#B0E0E6\",\r\n\t\"#D8BFD8\",\r\n\t\"#F5DEB3\",\r\n\t\"#C71585\"\r\n];","import * as React from 'react';\r\nimport { CityDetail } from '../../api';\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nimport styles from './Chart.module.scss';\r\nimport { COLORS } from '../../api/colors';\r\n\r\ninterface IChartProps {\r\n\tdata: Record<string, CityDetail[]>;\r\n}\r\n\r\nconst Chart: React.FunctionComponent<IChartProps> = (props) => {\r\n\tconst parseDateToXAxis = (date: Date) => {\r\n\t\treturn date.getDate() + \"/\" + (date.getMonth() + 1);\r\n\t}\r\n\r\n\tconst getDates = () => {\r\n\t\tlet dates: string[] = []\r\n\t\tlet itDate = new Date(2020, 3, 3);\r\n\t\tconst nowTime = new Date().getTime();\r\n\r\n\t\twhile(itDate.getTime() < nowTime) {\r\n\t\t\tdates.push(parseDateToXAxis(itDate));\r\n\t\t\titDate = new Date(itDate.getTime() + 86400000);\r\n\t\t}\r\n\r\n\t\treturn dates;\r\n\t}\r\n\r\n\tlet count = 0;\r\n\tconst getInfo = () => {\r\n\t\tlet finalObj: any[] = [];\r\n\r\n\t\tfor(const key in props.data) {\r\n\t\t\tlet cases: {x: string, y: number}[] = []\r\n\r\n\t\t\tconst currData = props.data[key];\r\n\r\n\t\t\tfor(let i = 0; i < currData.length; i++) {\t\t\t\t\r\n\t\t\t\tcases.push({\r\n\t\t\t\t\tx: parseDateToXAxis(new Date(currData[i].date)),\r\n\t\t\t\t\ty: currData[i].cases\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconst color = COLORS[count++ % COLORS.length];\r\n\r\n\t\t\tfinalObj.push({\r\n\t\t\t\tdata: cases,\r\n\t\t\t\tlabel: key,\r\n\t\t\t\t//borderColor: '#80b6f4',\r\n\t\t\t\t//pointBackgroundColor: '#80b6f4',\r\n\t\t\t\tborderColor: color,\r\n\t\t\t\tpointBackgroundColor: color,\r\n\t\t\t\tfill: false,\r\n\t\t\t\tpointHitRadius: 15,\r\n\t\t\t\tpointBorderWidth: 4\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t//console.log(finalObj.slice(0, 2));\r\n\t\treturn finalObj.slice(0, 35);\r\n\t}\r\n\r\n\t//const [dates, cases] = getInfo();\r\n\r\n\tconst lineChart = (\r\n\t\t<Line\r\n\t\t\tdata={{\r\n\t\t\t\tlabels: getDates(),\r\n\t\t\t\tdatasets: getInfo()\r\n\t\t\t}}\r\n\r\n\t\t\toptions={{\r\n\t\t\t\tlegend: {\r\n\t\t\t\t\tdisplay: true,\r\n\t\t\t\t\trtl: true,\r\n\t\t\t\t\tlabels: {\r\n\t\t\t\t\t\tfontSize: 12,\r\n\t\t\t\t\t\tusePointStyle: true,\r\n\t\t\t\t\t\tpadding: 18\r\n\t\t\t\t\t},\r\n\t\t\t\t\tposition: 'right'\r\n\t\t\t\t},\r\n\t\t\t\telements: {\r\n\t\t\t\t\tpoint: {\r\n\t\t\t\t\t\tpointStyle: 'circle'\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tscales: {\r\n\t\t\t\t\txAxes: [{\r\n\t\t\t\t\t\ttype: 'category',\r\n\t\t\t\t\t\tdisplay: true,\r\n\t\t\t\t\t\tgridLines: {\r\n\t\t\t\t\t\t\tdrawTicks: false,\r\n\t\t\t\t\t\t\tdisplay: false\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tticks: {\r\n\t\t\t\t\t\t\tautoSkip: true,\r\n\t\t\t\t\t\t\tpadding: 20,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t}],\r\n\t\t\t\t\tyAxes: [{\r\n\t\t\t\t\t\tdisplay: true,\r\n\t\t\t\t\t\tscaleLabel: {\r\n\t\t\t\t\t\t\tdisplay: true,\r\n\t\t\t\t\t\t\tlabelString: 'Infecteds'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tticks: {\r\n\t\t\t\t\t\t\tpadding: 10\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}]\r\n\t\t\t\t},\r\n\t\t\t\ttitle: {\r\n\t\t\t\t\tdisplay: true,\r\n\t\t\t\t\tfontFamily: 'WorkSans',\r\n\t\t\t\t\ttext: 'Corona Total Infecteds by City',\r\n\t\t\t\t\tfontSize: 28,\r\n\t\t\t\t\tfontColor: \"#000\",\r\n\t\t\t\t\tpadding: 40\r\n\t\t\t\t},\r\n\t\t\t\ttooltips: {\r\n\t\t\t\t\tmode: 'index',\r\n\t\t\t\t\tintersect: false,\r\n\t\t\t\t\tcustom: (tooltipModel: any) => {\r\n\t\t\t\t\t\ttooltipModel.y = 0;\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcallbacks: {\r\n\t\t\t\t\t\ttitle: function(tooltipItems: any, data: any) {\r\n\t\t\t\t\t\t\treturn data.datasets[tooltipItems[0].datasetIndex].data[tooltipItems[0].index].x;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttitleAlign: 'center',\r\n\t\t\t\t\tbodyAlign: 'right',\r\n\t\t\t\t\tbodySpacing: 3,\r\n\t\t\t\t\txPadding: 10\r\n\t\t\t\t}\r\n\t\t\t}}\r\n\t\t/>\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div className={styles.container}>\r\n\t\t\t{lineChart}\r\n\t\t</div>\r\n  \t);\r\n};\r\n\r\nexport default Chart;\r\n","import React from 'react';\n\nimport Cards from './components/Cards/Cards';\nimport Chart from './components/Chart/Chart';\n\nimport styles from './App.module.scss';\nimport { fetchData, Statistic, fetchDailyData, CityDetail } from './api';\nimport { CircularProgress } from '@material-ui/core';\n\nexport interface IAppState {\n\tglobalData?: Statistic;\n\tdailyData?: Record<string, CityDetail[]>;\n}\n\nexport default class App extends React.Component<{}, IAppState> {\n\n\tasync componentDidMount() {\n\t\tconst globalData = await fetchData();\n\t\tconst dailyData = await fetchDailyData();\n\n\t\tthis.setState({globalData: globalData, dailyData: dailyData});\n\t}\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<div className={styles.container}>\n\t\t\t\t<h2>C<div className={styles.space}><div className={styles.img}></div></div>rvid-19 Statistics</h2>\n\t\t\t\t{this.state && this.state.globalData && this.state.dailyData ? \n\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t<Cards data={this.state.globalData} />\n\t\t\t\t\t\t<Chart data={this.state.dailyData} />\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t:\n\t\t\t\t\t<CircularProgress className={styles.spinnerAlign} />\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\nconst citiesUrl = 'https://devdinocdn.com/mako/coronavirusStats/Home/GetCitiesHistory/';\r\n\r\nexport type SingleStat = {\r\n\tvalue: number,\r\n\tdetail: string\r\n}\r\n\r\nexport type Statistic = {\r\n\tconfirmed: SingleStat,\r\n\trecovered: SingleStat,\r\n\tdeaths: SingleStat,\r\n\tlastUpdate: string\r\n}\r\n\r\nexport type CityDetail = {\r\n\tdate: string;\r\n\tcases: number;\r\n\tnormalCases: number;\r\n}\r\n\r\nexport type CitiesInfo = {\r\n\tdata: {\r\n\t\tdata: Record<string, CityDetail[]>\r\n\t}\r\n}\r\n\r\nexport const fetchData = () => {\r\n\treturn axios.get<Statistic>(url).then(res => res.data);\r\n\r\n}\r\n\r\nexport const fetchDailyData = () => {\r\n\treturn axios.get<CitiesInfo>(citiesUrl).then(res => {\r\n\t\tconst cities = res.data.data.data;\r\n\t\treturn cities;\r\n\t});\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__wSLvj\"};"],"sourceRoot":""}